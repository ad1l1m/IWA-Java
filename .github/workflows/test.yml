name: Run WebInspect locally
# on: [push, workflow_dispatch]
# test1
on:
  push:
    branches: [main]
    
env:
  IWA_DIR:  C:\Users\Administrator\IWA-Java
  TARGET:   http://192.168.64.9:8888
concurrency:
  group: webinspect-winbox-1
  cancel-in-progress: true

jobs:
  wi:
    runs-on: [self-hosted, windows, x64, webinspect]
    environment: SSC_TOKEN
    timeout-minutes: 180
    steps:
      # - name: Wait for app (HTTP 200 on /)
      #   shell: powershell
      #   run: |
      #     $u = "${{ env.TARGET }}"
      #     $deadline = (Get-Date).AddMinutes(3)
      #     while ((Get-Date) -lt $deadline) {
      #       try {
      #         Invoke-WebRequest -UseBasicParsing -TimeoutSec 3 $u | Out-Null
      #         Write-Host "App is up at $u"; break
      #       } catch { Start-Sleep 2 }
      #     }
      #     if ((Get-Date) -ge $deadline) {
      #       Get-Content "$env:RUNNER_TEMP\app.err.log" -Tail 200 -ErrorAction SilentlyContinue
      #       throw "Service is not responding at $u"
      #     }

      # (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ—Ä–æ–Ω–Ω–∏–º action
      # - name: HTTP status check
      #   uses: lakuapik/gh-actions-http-status@v1
      #   with:
      #     sites: '["http://192.168.64.16:8888"]'
      #     expected: '[200]'

      # - name: Scan with WebInspect
      #   shell: powershell
      #   run: wi -u "${{ env.TARGET }}" -ps 1 -ep "C:\Users\Administrator\all_results\testing.fpr"

      # - name: Stop app
      #   if: always()
      #   shell: powershell
      #   run: |
      #     if ($env:APP_PID) { Stop-Process -Id $env:APP_PID -Force -ErrorAction SilentlyContinue }
      # - name: commands for upload
      #   env: 
      #       SSC_URL:  http://192.168.64.9:8080/ssc
      #       SSC_TOKEN: ${{ secrets.SSC_TOKEN }}   # –Ω–µ —Ö—Ä–∞–Ω–∏ —Ç–æ–∫–µ–Ω –≤ —è–≤–Ω–æ–º –≤–∏–¥–µ
      #       APP_VERSION_ID: '17'
      #       FPR: C:\Users\Administrator\all_results\testing.fpr
      #   shell: powershell
      #   run: |
      #     $ErrorActionPreference = 'Stop'
      #     $headers = @{ Authorization = "FortifyToken $env:SSC_TOKEN"; Accept = "application/json" }
      #     $body    = '{"fileTokenType":"UPLOAD"}'
      
      #     # 1) –ø–æ–ª—É—á–∏—Ç—å file token
      #     $uploadToken = (Invoke-RestMethod -Method Post `
      #       -Uri "$env:SSC_URL/api/v1/fileTokens" `
      #       -Headers $headers -ContentType "application/json" -Body $body).data.token
      
      #     if (-not $uploadToken) { throw "–ù–µ –ø–æ–ª—É—á–∏–ª–∏ uploadToken" }
      
      #     # 2) –∑–∞–≥—Ä—É–∑–∏—Ç—å FPR
      #     & $env:SystemRoot\System32\curl.exe -sS -X POST `
      #       "$env:SSC_URL/upload/resultFileUpload.html?mat=$uploadToken" `
      #       -F "entityId=$env:APP_VERSION_ID" `
      #       -F "file=@$env:FPR"
            
      - name: Fail build on Critical issues in SSC
        if: always()
        env:
          SSC_URL:  http://192.168.64.9:8080/ssc
          SSC_TOKEN: ${{ secrets.SSC_TOKEN }}
          APP_VERSION_ID: '17'   # —Ç–æ—Ç –∂–µ, —á—Ç–æ –≤—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø—Ä–∏ upload
        shell: powershell
        run: |
          $ErrorActionPreference = 'Stop'
          $headers = @{ Authorization = "FortifyToken $env:SSC_TOKEN"; Accept = "application/json" }

          Write-Host "Querying SSC for critical issues for project version id $env:APP_VERSION_ID ..."

          # –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ —Å q=[fortify priority order]:critical –∏ qm=issues
          $uri = "$env:SSC_URL/api/v1/projectVersions/$env:APP_VERSION_ID/issues?q=[fortify priority order]:critical&qm=issues&limit=1"

          try {
            $resp = Invoke-RestMethod -Method Get -Uri $uri -Headers $headers -UseBasicParsing -TimeoutSec 30
          } catch {
            Write-Error "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–æ—Å–∏—Ç—å SSC: $($_.Exception.Message)"
            throw
          }

          # qm=issues –æ–±—ã—á–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å data = [ issue, ... ]
          $criticalCount = 0

          if ($null -ne $resp.paging -and $resp.paging.total -ne $null) {
            $criticalCount = [int]$resp.paging.total
          } elseif ($resp.data -ne $null) {
            $criticalCount = [int]($resp.data | Measure-Object).Count
          } elseif ($resp.count -ne $null) {
            $criticalCount = [int]$resp.count
          } elseif ($resp -is [System.Array]) {
            $criticalCount = ($resp | Measure-Object).Count
          } else {
            # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π: –ø–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ —á–∏—Å–ª–æ–≤—ã–µ –ø–æ–ª—è
            if ($resp.total -ne $null) { $criticalCount = [int]$resp.total }
            elseif ($resp.size -ne $null) { $criticalCount = [int]$resp.size }
          }

          Write-Host "Critical issues found: $criticalCount"

          if ($criticalCount -gt 0) {
            Write-Host "Found $criticalCount critical issue(s) in SSC ‚Äî failing the job."
            Write-Host "See: $env:SSC_URL/projectVersions/$env:APP_VERSION_ID/issues?q=[fortify%20priority%20order]:critical"
            exit 1
          } else {
            Write-Host "No critical issues found. Build will pass."
            exit 0
          }
      # - name: Slack Notification
      #   if: failure()
      #   uses: slackapi/slack-github-action@v1.24.0
      #   with:
      #     payload: |
      #       {
      #         "text": "üö® Workflow *${{ github.workflow }}* failed on *${{ github.ref }}*.\nCheck run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
      #       }
      #   env:
      #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
