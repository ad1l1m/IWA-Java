- name: Start microservices in parallel, wait, scan, cleanup
  shell: pwsh
  run: |
    # === НАСТРОЙКИ ===
    $baseDir = "${{ env.IWA_DIR }}"             # корень с репозиториями
    $repositories = @('svc-a','svc-b')          # папки с pom.xml
    $urls = @{                                   # URL'ы для health-check'а
      'svc-a' = 'http://localhost:8081/actuator/health'
      'svc-b' = 'http://localhost:8082/actuator/health'
    }
    $scanTarget = 'http://localhost:8888'       # что сканировать WebInspect'ом
    $timeoutMin = 5

    # === ЗАПУСК В ПАРАЛЛЕЛЬ ===
    $jobs = @()
    foreach ($repo in $repositories) {
      $pom = Join-Path (Join-Path $baseDir $repo) 'pom.xml'  # было xml.pom — исправил
      $out = Join-Path $env:RUNNER_TEMP "$repo.out.log"
      $err = Join-Path $env:RUNNER_TEMP "$repo.err.log"

      $jobs += Start-Job -Name "run-$repo" -ScriptBlock {
        param($pomPath, $repoName, $outLog, $errLog)
        # Важно: -Dspring-boot.run.profiles без пробела
        $args = @('--file', $pomPath, '-q', '-DskipTests',
                  '-Dspring-boot.run.profiles=e2e', 'spring-boot:run')

        $psi = New-Object System.Diagnostics.ProcessStartInfo
        $psi.FileName = 'mvn'
        $psi.ArgumentList.AddRange($args)
        $psi.RedirectStandardOutput = $true
        $psi.RedirectStandardError = $true
        $psi.UseShellExecute = $false
        $psi.WorkingDirectory = Split-Path -Path $pomPath -Parent

        $p = New-Object System.Diagnostics.Process
        $p.StartInfo = $psi
        [void]$p.Start()
        $p.StandardOutput.BaseStream.CopyTo([System.IO.File]::Open($outLog, [System.IO.FileMode]::Create))
        $p.StandardError.BaseStream.CopyTo([System.IO.File]::Open($errLog, [System.IO.FileMode]::Create))
        $p.WaitForExit()
      } -ArgumentList $pom, $repo, $out, $err
    }

    # === ОЖИДАНИЕ ГОТОВНОСТИ СЕРВИСОВ ===
    $deadline = (Get-Date).AddMinutes($timeoutMin)
    foreach ($repo in $repositories) {
      $u = $urls[$repo]
      if (-not $u) { throw "Не задан URL для $repo в \$urls" }
      Write-Host "Ждём $repo по $u ..."
      while ((Get-Date) -lt $deadline) {
        try {
          Invoke-WebRequest -UseBasicParsing -TimeoutSec 3 $u | Out-Null
          Write-Host "$repo готов"
          break
        } catch {
          Start-Sleep 2
        }
      }
      if ((Get-Date) -ge $deadline) {
        Get-Content (Join-Path $env:RUNNER_TEMP "$repo.err.log") -Tail 200 -ErrorAction SilentlyContinue
        throw "Таймаут ожидания $repo ($u)"
      }
    }

    # === ЗАПУСК СКАНА WEBINSPECT ===
    wi.exe -u $scanTarget -ps 1 -ep (Join-Path $env:RUNNER_TEMP 'testing.fpr')

    # === ОЧИСТКА ===
    Write-Host "Останавливаем фоновые джобы..."
    Get-Job | Stop-Job -Force -ErrorAction SilentlyContinue
    Get-Job | Receive-Job -ErrorAction SilentlyContinue | Out-Null
    Get-Job | Remove-Job -Force -ErrorAction SilentlyContinue

    Write-Host "Хвосты логов:"
    foreach ($repo in $repositories) {
      Write-Host "===== $repo.err.log (tail) ====="
      Get-Content (Join-Path $env:RUNNER_TEMP "$repo.err.log") -Tail 50 -ErrorAction SilentlyContinue
    }
